{
	"info": {
		"_postman_id": "e5769b2c-073e-4a52-b919-07253ef35f46",
		"name": "Eleutheria",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34643024"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.json();\r",
									"pm.environment.set('newUser', response.result.id);\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response status is success\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.eql(\"success\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response has data field\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"data\");\r",
									"});\r",
									"\r",
									"pm.test(\"Data has message field\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.data.message).to.eql(\"User registered successfully.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Result object has required fields\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const result = jsonData.data.result;\r",
									"\r",
									"    pm.expect(result).to.have.property(\"first_name\");\r",
									"    pm.expect(result).to.have.property(\"last_name\");\r",
									"    pm.expect(result).to.have.property(\"email\");\r",
									"    pm.expect(result).to.have.property(\"updated_at\");\r",
									"    pm.expect(result).to.have.property(\"created_at\");\r",
									"    pm.expect(result).to.have.property(\"id\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"firstName\": \"Random\",\r\n  \"lastName\": \"Doe\",\r\n  \"email\": \"rand.doe@example.com\",\r\n  \"password\": \"password123\",\r\n  \"password_confirmation\": \"password123\",\r\n  \"phoneNumber\": \"+1234567890\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}/api/register",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.json();\r",
									"pm.environment.set('token', response.data.result.token);\r",
									"\r",
									"pm.test(\"Status test 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Response data test', function() {\r",
									"    pm.expect(response.data.message).to.be.a('string');\r",
									"    pm.expect(response.data.result.token).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"rand.doe@example.com\",\r\n  \"password\": \"password123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}/api/login",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logged User Roles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response status is success\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.eql(\"success\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response has data field\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"data\");\r",
									"});\r",
									"\r",
									"pm.test(\"Data has message field\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.data.message).to.eql(\"User roles are: \");\r",
									"});\r",
									"\r",
									"pm.test(\"Result is an array and contains roles\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const result = jsonData.data.result;\r",
									"\r",
									"    pm.expect(result).to.be.an('array');\r",
									"    pm.expect(result).to.include(\"voter\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}:{{port}}/api/v1/getMyRoles",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"v1",
								"getMyRoles"
							]
						}
					},
					"response": []
				},
				{
					"name": "Vote",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response status is success\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.eql(\"success\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response has data field\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"data\");\r",
									"});\r",
									"\r",
									"pm.test(\"Data has message field\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.data.message).to.eql(\"You voted successfully!\");\r",
									"});\r",
									"\r",
									"pm.test(\"Result is an empty array\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const result = jsonData.data.result;\r",
									"\r",
									"    pm.expect(result).to.be.an('array');\r",
									"    pm.expect(result).to.have.lengthOf(0);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}:{{port}}/api/v1/vote",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"v1",
								"vote"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}