{
	"info": {
		"_postman_id": "e5769b2c-073e-4a52-b919-07253ef35f46",
		"name": "Eleutheria",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34643024"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"newUser\", pm.response.json().data.id);\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Status is success\", function () {\r",
									"    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
									"});\r",
									"\r",
									"pm.test(\"Message is correct\", function () {\r",
									"    pm.expect(pm.response.json().message).to.eql(\"User registered successfully.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response structure is valid\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"status\");\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData).to.have.property(\"data\");\r",
									"    pm.expect(jsonData).to.have.property(\"meta\");\r",
									"\r",
									"    pm.expect(jsonData.data).to.have.property(\"id\");\r",
									"    pm.expect(jsonData.data).to.have.property(\"firstName\");\r",
									"    pm.expect(jsonData.data).to.have.property(\"lastName\");\r",
									"    pm.expect(jsonData.data).to.have.property(\"email\");\r",
									"    pm.expect(jsonData.data).to.have.property(\"phone\");\r",
									"\r",
									"    pm.expect(jsonData.meta).to.have.property(\"code\");\r",
									"    pm.expect(jsonData.meta).to.have.property(\"timestamp\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"firstName\": \"Random\",\r\n  \"lastName\": \"Doe\",\r\n  \"email\": \"rand.doe@example.com\",\r\n  \"password\": \"password123\",\r\n  \"password_confirmation\": \"password123\",\r\n  \"phone\": \"+1234567890\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}/api/auth/register",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"token\", pm.response.json().data.token);\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response structure is valid\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"status\");\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData).to.have.property(\"data\");\r",
									"    pm.expect(jsonData).to.have.property(\"meta\");\r",
									"\r",
									"    pm.expect(jsonData.data).to.have.property(\"token\");\r",
									"\r",
									"    pm.expect(jsonData.meta).to.have.property(\"code\");\r",
									"    pm.expect(jsonData.meta).to.have.property(\"timestamp\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status is success\", function () {\r",
									"    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
									"});\r",
									"\r",
									"pm.test(\"Message is correct\", function () {\r",
									"    pm.expect(pm.response.json().message).to.eql(\"User logged in successfully.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"rand.doe3@example.com\",\r\n  \"password\": \"password123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}/api/auth/login",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logged User Roles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response structure is valid\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"status\");\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData).to.have.property(\"data\");\r",
									"    pm.expect(jsonData).to.have.property(\"meta\");\r",
									"\r",
									"    pm.expect(jsonData.data).to.be.an(\"array\");\r",
									"\r",
									"    pm.expect(jsonData.meta).to.have.property(\"code\");\r",
									"    pm.expect(jsonData.meta).to.have.property(\"timestamp\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status is success\", function () {\r",
									"    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
									"});\r",
									"\r",
									"pm.test(\"Message is correct\", function () {\r",
									"    pm.expect(pm.response.json().message).to.eql(\"User roles:\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}:{{port}}/api/v1/account/roles",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"v1",
								"account",
								"roles"
							]
						}
					},
					"response": []
				},
				{
					"name": "Vote",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response structure is valid\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"status\");\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData).to.have.property(\"data\");\r",
									"    pm.expect(jsonData).to.have.property(\"meta\");\r",
									"\r",
									"    pm.expect(jsonData.data).to.be.an(\"array\");\r",
									"\r",
									"    pm.expect(jsonData.meta).to.have.property(\"code\");\r",
									"    pm.expect(jsonData.meta).to.have.property(\"timestamp\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status is success\", function () {\r",
									"    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
									"});\r",
									"\r",
									"pm.test(\"Message is correct\", function () {\r",
									"    pm.expect(pm.response.json().message).to.eql(\"You voted successfully!\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}:{{port}}/api/v1/vote",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"v1",
								"vote"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "Get Token ADMIN",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"token\", pm.response.json().data.token);\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response structure is valid\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"status\");\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData).to.have.property(\"data\");\r",
									"    pm.expect(jsonData).to.have.property(\"meta\");\r",
									"\r",
									"    pm.expect(jsonData.data).to.have.property(\"token\");\r",
									"\r",
									"    pm.expect(jsonData.meta).to.have.property(\"code\");\r",
									"    pm.expect(jsonData.meta).to.have.property(\"timestamp\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status is success\", function () {\r",
									"    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
									"});\r",
									"\r",
									"pm.test(\"Message is correct\", function () {\r",
									"    pm.expect(pm.response.json().message).to.eql(\"User logged in successfully.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"alice_admin@example.com\",\r\n  \"password\": \"password123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}/api/auth/login",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Users List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response structure is valid\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"status\");\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData).to.have.property(\"data\");\r",
									"    pm.expect(jsonData).to.have.property(\"meta\");\r",
									"\r",
									"    pm.expect(jsonData.data).to.be.an(\"array\");\r",
									"    if (jsonData.data.length > 0) {\r",
									"        const firstUser = jsonData.data[0];\r",
									"        pm.expect(firstUser).to.have.property(\"id\");\r",
									"        pm.expect(firstUser).to.have.property(\"firstName\");\r",
									"        pm.expect(firstUser).to.have.property(\"lastName\");\r",
									"        pm.expect(firstUser).to.have.property(\"email\");\r",
									"        pm.expect(firstUser).to.have.property(\"phone\");\r",
									"    }\r",
									"\r",
									"    pm.expect(jsonData.meta).to.have.property(\"code\");\r",
									"    pm.expect(jsonData.meta).to.have.property(\"timestamp\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status is success\", function () {\r",
									"    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
									"});\r",
									"\r",
									"pm.test(\"Message is correct\", function () {\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Users list:\");\r",
									"});\r",
									"\r",
									"pm.test(\"Meta code is 200\", function () {\r",
									"    pm.expect(pm.response.json().meta.code).to.eql(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}:{{port}}/api/v1/users",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Users Show",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response structure is valid\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"status\");\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData).to.have.property(\"data\");\r",
									"    pm.expect(jsonData).to.have.property(\"meta\");\r",
									"\r",
									"    pm.expect(jsonData.data).to.have.property(\"id\");\r",
									"    pm.expect(jsonData.data).to.have.property(\"firstName\");\r",
									"    pm.expect(jsonData.data).to.have.property(\"lastName\");\r",
									"    pm.expect(jsonData.data).to.have.property(\"email\");\r",
									"    pm.expect(jsonData.data).to.have.property(\"phone\");\r",
									"\r",
									"    pm.expect(jsonData.meta).to.have.property(\"code\");\r",
									"    pm.expect(jsonData.meta).to.have.property(\"timestamp\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status is success\", function () {\r",
									"    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
									"});\r",
									"\r",
									"pm.test(\"Message is correct\", function () {\r",
									"    pm.expect(pm.response.json().message).to.eql(\"User is:\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}:{{port}}/api/v1/users/{{newUser}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"v1",
								"users",
								"{{newUser}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Users Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"newUser\", pm.response.json().data.id);\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Status is success\", function () {\r",
									"    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
									"});\r",
									"\r",
									"pm.test(\"Message is correct\", function () {\r",
									"    pm.expect(pm.response.json().message).to.eql(\"User created successfully.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response structure is valid\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"status\");\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData).to.have.property(\"data\");\r",
									"    pm.expect(jsonData).to.have.property(\"meta\");\r",
									"\r",
									"    pm.expect(jsonData.data).to.have.property(\"id\");\r",
									"    pm.expect(jsonData.data).to.have.property(\"firstName\");\r",
									"    pm.expect(jsonData.data).to.have.property(\"lastName\");\r",
									"    pm.expect(jsonData.data).to.have.property(\"email\");\r",
									"    pm.expect(jsonData.data).to.have.property(\"phone\");\r",
									"\r",
									"    pm.expect(jsonData.meta).to.have.property(\"code\");\r",
									"    pm.expect(jsonData.meta).to.have.property(\"timestamp\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"first_name\": \"Some\",\r\n    \"last_name\": \"RandomDude\",\r\n    \"email\": \"some.randude@example.com\",\r\n    \"password\": \"strongpassword123\",\r\n    \"phone\": \"1234567890\",\r\n    \"is_active\": true\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}/api/v1/users",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Users Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response structure is valid\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"status\");\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData).to.have.property(\"data\");\r",
									"    pm.expect(jsonData).to.have.property(\"meta\");\r",
									"\r",
									"    pm.expect(jsonData.data).to.have.property(\"id\");\r",
									"    pm.expect(jsonData.data).to.have.property(\"firstName\");\r",
									"    pm.expect(jsonData.data).to.have.property(\"lastName\");\r",
									"    pm.expect(jsonData.data).to.have.property(\"email\");\r",
									"    pm.expect(jsonData.data).to.have.property(\"phone\");\r",
									"\r",
									"    pm.expect(jsonData.meta).to.have.property(\"code\");\r",
									"    pm.expect(jsonData.meta).to.have.property(\"timestamp\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status is success\", function () {\r",
									"    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
									"});\r",
									"\r",
									"pm.test(\"Message is correct\", function () {\r",
									"    pm.expect(pm.response.json().message).to.eql(\"User updated successfully.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"first_name\": \"Other\",\r\n    \"last_name\": \"RandomDude\",\r\n    \"email\": \"Update.Email@example.com\",\r\n    \"password\": \"strongpassword123\",\r\n    \"phone\": \"1234567890\",\r\n    \"is_active\": true\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}/api/v1/users/{{newUser}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"v1",
								"users",
								"{{newUser}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Users Deactivate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response structure is valid\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"status\");\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData).to.have.property(\"data\");\r",
									"    pm.expect(jsonData).to.have.property(\"meta\");\r",
									"\r",
									"    pm.expect(jsonData.data).to.have.property(\"id\");\r",
									"    pm.expect(jsonData.data).to.have.property(\"firstName\");\r",
									"    pm.expect(jsonData.data).to.have.property(\"lastName\");\r",
									"    pm.expect(jsonData.data).to.have.property(\"email\");\r",
									"    pm.expect(jsonData.data).to.have.property(\"phone\");\r",
									"\r",
									"    pm.expect(jsonData.meta).to.have.property(\"code\");\r",
									"    pm.expect(jsonData.meta).to.have.property(\"timestamp\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status is success\", function () {\r",
									"    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
									"});\r",
									"\r",
									"pm.test(\"Message is correct\", function () {\r",
									"    pm.expect(pm.response.json().message).to.eql(\"User deactivated successfully.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}:{{port}}/api/v1/users/deactivate/{{newUser}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"v1",
								"users",
								"deactivate",
								"{{newUser}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Users Hard Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response structure is valid\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"status\");\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData).to.have.property(\"data\");\r",
									"    pm.expect(jsonData).to.have.property(\"meta\");\r",
									"\r",
									"    pm.expect(jsonData.meta).to.have.property(\"code\");\r",
									"    pm.expect(jsonData.meta).to.have.property(\"timestamp\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status is success\", function () {\r",
									"    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
									"});\r",
									"\r",
									"pm.test(\"Message is correct\", function () {\r",
									"    pm.expect(pm.response.json().message).to.eql(\"User deleted successfully.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}:{{port}}/api/v1/users/{{newUser}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"v1",
								"users",
								"{{newUser}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Token VOTER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"token\", pm.response.json().data.token);\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response structure is valid\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"status\");\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData).to.have.property(\"data\");\r",
									"    pm.expect(jsonData).to.have.property(\"meta\");\r",
									"\r",
									"    pm.expect(jsonData.data).to.have.property(\"token\");\r",
									"\r",
									"    pm.expect(jsonData.meta).to.have.property(\"code\");\r",
									"    pm.expect(jsonData.meta).to.have.property(\"timestamp\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status is success\", function () {\r",
									"    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
									"});\r",
									"\r",
									"pm.test(\"Message is correct\", function () {\r",
									"    pm.expect(pm.response.json().message).to.eql(\"User logged in successfully.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"eve_voter@example.com\",\r\n  \"password\": \"password123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}/api/auth/login",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"auth",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Roles",
			"item": [
				{
					"name": "Get Token ADMIN",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"token\", pm.response.json().data.token);\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response structure is valid\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"status\");\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData).to.have.property(\"data\");\r",
									"    pm.expect(jsonData).to.have.property(\"meta\");\r",
									"\r",
									"    pm.expect(jsonData.data).to.have.property(\"token\");\r",
									"\r",
									"    pm.expect(jsonData.meta).to.have.property(\"code\");\r",
									"    pm.expect(jsonData.meta).to.have.property(\"timestamp\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status is success\", function () {\r",
									"    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
									"});\r",
									"\r",
									"pm.test(\"Message is correct\", function () {\r",
									"    pm.expect(pm.response.json().message).to.eql(\"User logged in successfully.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"alice_admin@example.com\",\r\n  \"password\": \"password123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}/api/auth/login",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get My Roles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has success status\", function () {\r",
									"    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
									"});\r",
									"\r",
									"pm.test(\"Message is correct\", function () {\r",
									"    pm.expect(pm.response.json().message).to.eql(\"User roles:\");\r",
									"});\r",
									"\r",
									"pm.test(\"Data array contains 'admin'\", function () {\r",
									"    pm.expect(pm.response.json().data).to.be.an(\"array\").that.includes(\"admin\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}/api/v1/account/roles",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"v1",
								"account",
								"roles"
							]
						}
					},
					"response": []
				},
				{
					"name": "Users Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"newUser\", pm.response.json().data.id);\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Status is success\", function () {\r",
									"    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
									"});\r",
									"\r",
									"pm.test(\"Message is correct\", function () {\r",
									"    pm.expect(pm.response.json().message).to.eql(\"User created successfully.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response structure is valid\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"status\");\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData).to.have.property(\"data\");\r",
									"    pm.expect(jsonData).to.have.property(\"meta\");\r",
									"\r",
									"    pm.expect(jsonData.data).to.have.property(\"id\");\r",
									"    pm.expect(jsonData.data).to.have.property(\"firstName\");\r",
									"    pm.expect(jsonData.data).to.have.property(\"lastName\");\r",
									"    pm.expect(jsonData.data).to.have.property(\"email\");\r",
									"    pm.expect(jsonData.data).to.have.property(\"phone\");\r",
									"\r",
									"    pm.expect(jsonData.meta).to.have.property(\"code\");\r",
									"    pm.expect(jsonData.meta).to.have.property(\"timestamp\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"first_name\": \"Some\",\r\n    \"last_name\": \"RandomDude\",\r\n    \"email\": \"some.randude@example.com\",\r\n    \"password\": \"strongpassword123\",\r\n    \"phone\": \"1234567890\",\r\n    \"is_active\": true\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}/api/v1/users",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Created User Roles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has success status\", function () {\r",
									"    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
									"});\r",
									"\r",
									"pm.test(\"Message is correct\", function () {\r",
									"    pm.expect(pm.response.json().message).to.eql(\"User roles:\");\r",
									"});\r",
									"\r",
									"pm.test(\"Data array contains 'admin'\", function () {\r",
									"    pm.expect(pm.response.json().data).to.be.an(\"array\").that.includes(\"voter\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}/api/v1/account/roles/{{newUser}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"v1",
								"account",
								"roles",
								"{{newUser}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Role Assign",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"User has 'member' role\", function () {\r",
									"    const roles = pm.response.json().data;\r",
									"    pm.expect(roles).to.include(\"member\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response structure is valid\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"status\");\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData).to.have.property(\"data\");\r",
									"    pm.expect(jsonData).to.have.property(\"meta\");\r",
									"\r",
									"    pm.expect(jsonData.data).to.be.an(\"array\");\r",
									"\r",
									"    pm.expect(jsonData.meta).to.have.property(\"code\");\r",
									"    pm.expect(jsonData.meta).to.have.property(\"timestamp\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status is success\", function () {\r",
									"    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
									"});\r",
									"\r",
									"pm.test(\"Message is correct\", function () {\r",
									"    pm.expect(pm.response.json().message).to.eql(\"User roles:\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userId\": {{newUser}},\r\n    \"roleName\": \"member\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}/api/v1/account/roles/assign",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"v1",
								"account",
								"roles",
								"assign"
							]
						}
					},
					"response": []
				},
				{
					"name": "Role Remove",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"User does not have 'member' role\", function () {\r",
									"    const roles = pm.response.json().data;\r",
									"    pm.expect(roles).to.not.include(\"member\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response structure is valid\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"status\");\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData).to.have.property(\"data\");\r",
									"    pm.expect(jsonData).to.have.property(\"meta\");\r",
									"\r",
									"    pm.expect(jsonData.data).to.be.an(\"array\");\r",
									"\r",
									"    pm.expect(jsonData.meta).to.have.property(\"code\");\r",
									"    pm.expect(jsonData.meta).to.have.property(\"timestamp\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status is success\", function () {\r",
									"    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
									"});\r",
									"\r",
									"pm.test(\"Message is correct\", function () {\r",
									"    pm.expect(pm.response.json().message).to.eql(\"User roles:\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userId\": {{newUser}},\r\n    \"roleName\": \"member\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}:{{port}}/api/v1/account/roles/remove",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"v1",
								"account",
								"roles",
								"remove"
							]
						}
					},
					"response": []
				},
				{
					"name": "Users Hard Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response structure is valid\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"status\");\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData).to.have.property(\"data\");\r",
									"    pm.expect(jsonData).to.have.property(\"meta\");\r",
									"\r",
									"    pm.expect(jsonData.meta).to.have.property(\"code\");\r",
									"    pm.expect(jsonData.meta).to.have.property(\"timestamp\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status is success\", function () {\r",
									"    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
									"});\r",
									"\r",
									"pm.test(\"Message is correct\", function () {\r",
									"    pm.expect(pm.response.json().message).to.eql(\"User deleted successfully.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}:{{port}}/api/v1/users/{{newUser}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"v1",
								"users",
								"{{newUser}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}